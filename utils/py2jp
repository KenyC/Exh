#!/usr/bin/python3.6
"""
From https://github.com/kiwi0fruit/ipynb-py-convert/blob/master/ipynb_py_convert/__main__.py

The MIT License (MIT)

Copyright (c) 2018 Noj Vek nojvek@gmail.com
(c) 2020 Keny Chatain keny.chatain@gmail.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""
import json
import sys
import argparse
import re
from os import path

header_comment = "# %%"
md_content = re.compile(r'^\s*\n"""\s*\n((.|\n)+)"""\s*(\n)+')
# md_content = re.compile(r'"""\n(.+)"""\n.+')


def nb2py(notebook):
    result = []
    cells = notebook['cells']

    for cell in cells:
        cell_type = cell['cell_type']

        if cell_type == 'markdown':
            result.append('%s"""\n%s\n"""'%
                          (header_comment, ''.join(cell['source'])))

        if cell_type == 'code':
            result.append("%s%s" % (header_comment, ''.join(cell['source'])))

    return '\n\n'.join(result)


def py2nb(py_str):
    # remove leading header comment
    if py_str.startswith(header_comment):
        py_str = py_str[len(header_comment):]

    cells = []
    chunks = py_str.split('\n' + header_comment)

    for chunk in chunks:

        match = md_content.search(chunk)

        if match:
            cells.append({
                "cell_type": "markdown",
                "metadata":  {},
                "source":    match.group(1).splitlines(True)
            })
            chunk = chunk[len(match.group(0)):]


        cells.append({
            'cell_type':       "code",
            'metadata':        {},
            'source':          chunk.splitlines(True),
            'outputs':         [],
            'execution_count': None
        })



    notebook = {
        'cells': cells,
        'metadata': {
            'anaconda-cloud': {},
            'kernelspec': {
                'display_name': 'Python 3',
                'language': 'python',
                'name': 'python3'},
            'language_info': {
                'codemirror_mode': {'name': 'ipython', 'version': 3},
                'file_extension': '.py',
                'mimetype': 'text/x-python',
                'name': 'python',
                'nbconvert_exporter': 'python',
                'pygments_lexer': 'ipython3',
                'version': '3.6.1'}},
        'nbformat': 4,
        'nbformat_minor': 4
    }

    return notebook


def convert(in_file, out_file, py_in = True):
    if py_in:
        with open(in_file, 'r',  encoding = 'utf-8') as f:
            py_str = f.read()

        notebook = py2nb(py_str)

        with open(out_file, 'w', encoding = 'utf-8') as f:
            json.dump(notebook, f, indent = 2)
    else:
        with open(in_file, 'r',  encoding = 'utf-8') as f:
            notebook = json.load(f)

        py_str = nb2py(notebook)

        with open(out_file, 'w', encoding = 'utf-8') as f:
            f.write(py_str)



if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description = 'Convert from .py to .ipynb and vice-versa. Desired conversion is inferred from extension.'
    )

    parser.add_argument('filename', help = 'File name of input')
    parser.add_argument('--out',    help = "File name of output (default: blabla.py <-> blabla.ipynb)")

    args = parser.parse_args()

    basename, extension   = path.splitext(args.filename)
    pyfile                = extension != ".ipynb"

    if args.out is not None:
        output_name = args.out
    elif pyfile:
        output_name = basename + ".ipynb"
    else:
        output_name = basename + ".py"

    convert (
        in_file  = args.filename, 
        out_file = output_name,
        py_in    = pyfile
    )

    print("=> {}".format(output_name))
    